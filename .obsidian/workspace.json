{
  "main": {
    "id": "0bd4156f8b40b2c3",
    "type": "split",
    "children": [
      {
        "id": "2de7d45ba0a31808",
        "type": "tabs",
        "children": [
          {
            "id": "8a36531558991d39",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Projects/clone-arknight/memo.md",
                "mode": "source",
                "source": false
              },
              "icon": "lucide-file",
              "title": "memo"
            }
          },
          {
            "id": "36699c98344b30ad",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Areas/Spring-framework/8.single-ton-pattern.md",
                "mode": "source",
                "source": false
              },
              "icon": "lucide-file",
              "title": "8.single-ton-pattern"
            }
          }
        ],
        "currentTab": 1
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "01e261a601424635",
    "type": "split",
    "children": [
      {
        "id": "63e8427373eb8cf0",
        "type": "tabs",
        "children": [
          {
            "id": "c5b54908b380f0a2",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical",
                "autoReveal": false
              },
              "icon": "lucide-folder-closed",
              "title": "Files"
            }
          },
          {
            "id": "d04922cf5ba99487",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "\"## 보호 프록시> 💡 **접근 권한을 바탕으로** 객체로의 접근을 제어하는 프록시### 구현 예제 - 보호 프록시데이팅 서비스를 구현해본다고 하자.이 서비스에서의 요구사항은 다음과 같다.1. 고객이 자기 정보를 직접 수정할 수 있도록 하면서, **다른 고객은 그 정보를 수정할 수 없도록** 해야 한다.2. 선호도는 반대로, 다른 고객만 점수를 매길 수 있고 **자신은 점수를 매길 수 없도록** 해야 한다.이들을 해결하기 위해서는 2개의 프록시가 필요하다.- 본인의 `Person` 객체에 접근하는 프록시- 다른 사람들의 `Person` 객체에 접근하는 프록시`Person` 객체는 다음과 같다.```javapublic interface Person {    String getName();    String getGender();    String getInterests();    int getGeekRating();    void setName(String name);    void setGender(String gender);    void setInterests(String interests);    void setGeekRating(int rating);}```  위에서 살펴보았던 동적 프록시 기술을 사용하여 동적 프록시를 구현해보자.  [![동적 프록시](https://user-images.githubusercontent.com/86337233/212689085-cd285023-fb6d-4650-88f7-c56207a5bd91.png)](https://user-images.githubusercontent.com/86337233/212689085-cd285023-fb6d-4650-88f7-c56207a5bd91.png)  1. 2개의 `InvocationHandler` 생성2. 동적 프록시 생성 코드 만들기3. 적절한 프록시로 `Person` 객체 감싸기    - 고객 자신의 객체 → owner    - 다른 고객의 객체 → non-owner        [![Person 객체 - 프록시](https://user-images.githubusercontent.com/86337233/212689087-1575a91e-0325-47e8-83b3-ac9f59633e77.png)](https://user-images.githubusercontent.com/86337233/212689087-1575a91e-0325-47e8-83b3-ac9f59633e77.png)    #### 1단계 : InvocationHandler 생성프록시의 메서드가 호출되면 프록시는 그 호출을 `InvocationHandler`(호출 핸들러)에게 넘기는데,  여기에는 메서드가 `invoke()` 하나밖에 없다.즉, 프록시의 어떤 메서드가 호출되든 무조건 `invoke()` 메서드가 호출되는 것이며,  그 메서드 속에서 주어진 요청을 어떻게 처리할지를 결정한다.```javareturn method.invoke(person,args);// method : invoke() 메서드 호출로 전달된 객체// person : 진짜 객체에 메서드를 호출// args : 처음에 받았던 인자들을 전달```##### 본인용 프록시를 위한 호출 핸들러 : OwnerInvocationHandler```javaimport java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class OwnerInvocationHandler implements InvocationHandler {    Person person;    public OwnerInvocationHandler(Person person) {        this.person = person;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException {        try {            if (method.getName().startsWith(\\\"get\")) {                return method.invoke(person, args);            } else if (method.getName().equals(\"setGeekRating\")) {                throw new IllegalAccessException(); // 메서드 호출을 막음            } else if (method.getName().startsWith(\"set\")) {                return method.invoke(person, args);            }            // 나머지 메서드는 모두 허용 → 주제에 있는 메서드를 호출        }        // 진짜 주제에서 예외를 던졌을 경우        catch (InvocationTargetException e) {            e.printStackTrace();        }        // 다른 메서드가 호출되었을 경우        return null;    }}```##### 타인용 프록시를 위한 호출 핸들러 : NonOwnerInvocationHandler```javaimport java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class NonOwnerInvocationHandler implements InvocationHandler {    Person person;    public NonOwnerInvocationHandler(Person person) {        this.person = person;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException {        try {            if (method.getName().startsWith(\"get\")) {                return method.invoke(person, args);            } else if (method.getName().equals(\"setGeekRating\")) {                return method.invoke(person, args);            } else if (method.getName().startsWith(\"set\")) {                throw new IllegalAccessException(); // 메서드 호출을 막음            }            // 나머지 메서드는 모두 허용 → 주제에 있는 메서드를 호출        }        // 진짜 주제에서 예외를 던졌을 경우        catch (InvocationTargetException e) {            e.printStackTrace();        }        // 다른 메서드가 호출되었을 경우        return null;    }}```#### 2단계 : 동적 프록시 생성 코드 만들기```java/** * TODO: 동적 프록시 생성 코드 * * @param person Person 객체(진짜 주제) * @return 프록시 * (프록시의 인터페이스 == 주제의 인터페이스) */    Person getOwnerProxy(Person person) {            return (Person) Proxy.newProxyInstance(            person.getClass().getClassLoader(), // person의 클래스 로더            person.getClass().getInterfaces(), // 프록시에서 구현해야 하는 인터페이스            new OwnerInvocationHandler(person)); // 호출 핸들러    }    Person getNonOwnerProxy(Person person) {            return (Person) Proxy.newProxyInstance(            person.getClass().getClassLoader(),            person.getClass().getInterfaces(),            new NonOwnerInvocationHandler(person));    }```> `InvocationHandler` 자체는 프록시가 아니라, **메서드 호출을 처리하는 클래스일 뿐**이다.  > 실제 프록시는 `Proxy.newProxyInstance()` 정적 메서드에 의해서 실행 중에 동적으로 생성된다.`newProxyInstance()`를 호출할 때의 형식에는 몇가지 제한이 존재한다.- 인터페이스의 배열을 인자로 전달해야 한다.- `public`으로 지정되지 않은 인터페이스는 같은 패키지에 들어있는 인터페이스만 인자로 전달할 수 있다.더 자세한 사항들은 [해당 링크](https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html)를 참고하길 바란다.  #### 3단계 : 적절한 프록시로 Person 객체 감싸기전체 코드##### 본인용 프록시 생성 후 테스트```java// 1-1. 인물 정보를 DB로부터 가져옴Person joe=getPersonFromDatabase(\"Joe Javabean\");// 1-2. 본인용 프록시 생성Person ownerProxy = getOwnerProxy(joe);System.out.println(\"Name is \" + ownerProxy.getName());ownerProxy.setInterests(\"bowling, Go\");System.out.println(\"Interests set from owner proxy\");// 1-3. 선호도 설정 시도 (본인용 프록시에서는 불가)try {    ownerProxy.setGeekRating(10);} catch (Exception e) {    System.out.println(\"Can't set rating from owner proxy\");}System.out.println(\"Rating is \" + ownerProxy.getGeekRating());```출력 결과```Name is Joe JavabeanInterests set from owner proxyCan't set rating from owner proxyRating is 7```##### 타인용 프록시 생성 후 테스트```java// 2-1. 타인용 프록시 생성Person nonOwnerProxy = getNonOwnerProxy(joe);System.out.println(\"Name is \" + nonOwnerProxy.getName());// 2-2. 관심사 변경 시도 (타인용 프록시에서는 불가)try {    nonOwnerProxy.setInterests(\"bowling, Go\");} catch (Exception e) {    System.out.println(\"Can't set interests from non owner proxy\");}// 2-3. 선호도 설정nonOwnerProxy.setGeekRating(3);System.out.println(\"Rating set from non owner proxy\");System.out.println(\"Rating is \" + nonOwnerProxy.getGeekRating());```출력 결과```Name is Joe JavabeanCan't set interests from non owner proxyRating set from non owner proxyRating is 5```\"",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              },
              "icon": "lucide-search",
              "title": "Search"
            }
          },
          {
            "id": "b78b3567261a9111",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {},
              "icon": "lucide-bookmark",
              "title": "Bookmarks"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300
  },
  "right": {
    "id": "c8a03d5a0fb0a617",
    "type": "split",
    "children": [
      {
        "id": "ea2950accec189cd",
        "type": "tabs",
        "children": [
          {
            "id": "4b880ba72832965c",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "week1/vscode_hotkeys.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-coming-in",
              "title": "Backlinks for vscode_hotkeys"
            }
          },
          {
            "id": "11436ef7709b1e3b",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "week1/vscode_hotkeys.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-going-out",
              "title": "Outgoing links from vscode_hotkeys"
            }
          },
          {
            "id": "17976f588dc8abde",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true,
                "showSearch": false,
                "searchQuery": ""
              },
              "icon": "lucide-tags",
              "title": "Tags"
            }
          },
          {
            "id": "a18f60ab6cc7edda",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "week1/vscode_hotkeys.md",
                "followCursor": false,
                "showSearch": false,
                "searchQuery": ""
              },
              "icon": "lucide-list",
              "title": "Outline of vscode_hotkeys"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false,
      "markdown-importer:Open format converter": false
    }
  },
  "active": "36699c98344b30ad",
  "lastOpenFiles": [
    "Areas/Spring-framework/7.Spring-container&bean.md",
    "Areas/Spring-framework/8.single-ton-pattern.md",
    "Projects/clone-arknight/memo.md",
    "Areas/Spring-framework/99.spring-todo.md",
    "Areas/todo.md",
    "Resources/lecture-note/250718.md",
    "Pasted image 20250716134732.png",
    "Projects/mokjoon-project/week1_user-story.md",
    "Projects/mokjoon-project/week1_tool-selection.md",
    "Projects/mokjoon-project/week1_requirements&constraints.md",
    "Projects/mokjoon-project/week1_process-tracker.md",
    "Projects/mokjoon-project/week1_memo.md",
    "Projects/clone-arknight",
    "Resources/lecture-note/250717.md",
    "Resources/lecture-note/250715.md",
    "Resources/lecture-note/250714-coffee-chat.md",
    "Resources/lecture-note/250714.md",
    "Resources/lecture-note/250711.md",
    "Resources/lecture-note/250709-Coffee-chat.md",
    "Resources/lecture-note/250709.md",
    "Areas/Spring-framework/6.practice.md",
    "Areas/Spring-framework/week2_spring-with-triangle(writing).md",
    "Areas/Spring-framework/5.SOLID.md",
    "Areas/Spring-framework/4.oop&spring.md",
    "Areas/Spring-framework/3.good-oop.md",
    "Areas/Spring-framework/2.what-is-spring.md",
    "Areas/Spring-framework/1.history.md",
    "Areas/design-pattern/week2_template-method.md",
    "Areas/design-pattern/Images",
    "Resources/[O`Reilly. Head First] - Head First Design Patterns - [Freeman].pdf",
    "Resources/jwt_warning.png",
    "Resources/Behind_the_scenes__How_do_lambda_expressions_really_work_in_Java_.pdf",
    "Resources/Images/design-pattern/template-method-caffeinebeverage.png",
    "Resources/Images/design-pattern",
    "Pasted image 20250715210014.png",
    "Areas/design-pattern",
    "Areas/software-develop-process",
    "Areas/Spring-framework",
    "Resources/Images/week1_how-to-eXtremeProgramming",
    "Resources/Images/week1_how-to-eXtremeProgramming/xp-process.png",
    "Projects/mokjoon-project",
    "Resources/Images/week1_report_Software-development-process/how-to-login.png",
    "Resources/Images/week1_git-rebase/rebase-case14.png",
    "Resources/Images/week1_git-rebase/rebase-case13.png",
    "Resources/Images/week1_git-rebase/rebase-case12.png",
    "Resources/Images/week1_git-rebase/rebase-case11.png"
  ]
}